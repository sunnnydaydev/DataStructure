                                   简单时间复杂度

1 时间复杂度：可以通过时间复杂度分析代码，可以看出代码的性能。
2 表示：用大O表示，描述的是算法的运行时间和输入数据之间的关系（简单的理解定义）
3 常见举例：O(n) ,O(n^2)
为什么叫O(n) ？ 忽略常数表达方式  实际时间T = a1 * n + b；（a b为常数，线性方程式。）


4 如下常见式子：
T1 = 2 * n + 1   O（n）

T2 = 1000 * n + 3000   O（n）

T3 = 1* n * n + 1      O（n^2）

一般我们说 时间复杂度T3>T2>T1 ,（高阶算法相对较高）
 O（n）的表示实际叫 渐进时间复杂度，实际描述的是当n 趋近无穷时两个算法的性能快慢。

 注意：当n趋近无穷时，一个低阶算法的时间复杂度才更容易体现出来（相比高阶更快）
 典型特例应用：排序时根据常数不同选取合适的复杂度公式。


 一般 T4 = 11* n * n + 10n 时间复杂度O亦可以 为  O（n^2）  当 n趋近无穷时 低阶可以忽略