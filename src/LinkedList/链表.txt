一 、学过的三种数据结构：

1 动态数组（底层还是静态数组，resize则解决容量问题）
2 栈
3 队列

       三者底层都是依赖静态数组

二、 新的数据结构链表
 链表： 真正的动态数据结构
 特点：最简单的数据结构
 好处： 帮助我们更深刻理解引用（c++中的指针）
        帮助我们更深入理解递归（天然的递归性）

 介绍：
 数据存储在节点中（Node）

 class Node{
     E e ;// 存元素
     Node next;// 下一个节点的引用
 }

 注意：最后一个next == null；
 链表优点：真正的动态，不需要处理固定容量问题。
 缺点：丧失了随机访问的能力

 数组靠的是连续的内存地址，通过索引就可以访问，链表考得是next的指向，要next寻找。

头结点：情况下的添加
    （插入头结点时特殊处理）
链表添加元素时在头部和中间位置添加逻辑也进行分布处理，因为头部没有上一个节点，
为了方便我们虚拟头结点。
dummyHead 存储null，dummyHead.next 为头结点（类似循环队列的多一个元素处理）

虚拟头结点情况下：
 链表添加元素总结
 1 创建节点
 2 创建节点的指针指向下一个节点（下一个节点的表示问题-- 前一个节点的next表示）
 3 上一个节点指向本节点
 （总的来说也就是两节点尾部修改）
 注意2,3 步骤不能反

添加元素的遍历总结：从虚拟头结点开始 到index 前一位， 遍历节点从虚拟头结点开始（遍历元素从首个节点开始）

add（） 虚拟头结点

get set 首个节点

contain  toString 遍历整个

remove  虚拟头结点


三 链表实现栈